// index.js ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è, production-ready –≤–µ—Ä—Å–∏—è —Å secret_token –¥–ª—è Render + Telegraf
require('dotenv').config();
const express = require('express');
const { Telegraf } = require('telegraf');
const supabase = require('./supabase');

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const requiredEnv = [
  'TELEGRAM_BOT_TOKEN',
  'WEBHOOK_SECRET',        // –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ secret_token (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 16‚Äì256 —Å–∏–º–≤–æ–ª–æ–≤)
  'SUPABASE_URL',
  'SUPABASE_ANON_KEY'
];

for (const key of requiredEnv) {
  if (!process.env[key]) {
    throw new Error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${key}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã secret_token (Telegram —Ç—Ä–µ–±—É–µ—Ç 16‚Äì256 ASCII —Å–∏–º–≤–æ–ª–æ–≤)
const secretToken = process.env.WEBHOOK_SECRET;
if (secretToken.length < 16 || secretToken.length > 256) {
  throw new Error('‚ùå WEBHOOK_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 16 –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤');
}

const app = express();
const port = process.env.PORT || 3000;
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const webhookPath = '/webhook'; // –ø—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø—É–±–ª–∏—á–Ω—ã–º

// === Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ secret_token –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
const verifyTelegramSecret = (req, res, next) => {
  const token = req.headers['x-telegram-bot-api-secret-token'];
  if (token !== secretToken) {
    console.warn('‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ X-Telegram-Bot-Api-Secret-Token');
    return res.status(401).end();
  }
  next();
};

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
app.use(webhookPath, express.json(), verifyTelegramSecret, async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).end();
  }
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç ===
bot.on('my_chat_member', async (ctx) => {
  const { my_chat_member: msg } = ctx.update;
  const { chat } = msg;
  const newStatus = msg.new_chat_member?.status;

  if (newStatus === 'member' || newStatus === 'administrator') {
    try {
      const chatInfo = await ctx.telegram.getChat(chat.id);
      console.log('‚ÑπÔ∏è –ù–æ–≤—ã–π —á–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', chatInfo.title || chatInfo.id);

      const { error } = await supabase
        .from('chats')
        .insert({
          telegram_chat_id: chatInfo.id,
          title: chatInfo.title || 'Untitled',
          type: chatInfo.type,
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Ç–∞:', error.message);
      } else {
        console.log('‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É');
      }
    } catch (err) {
      console.error('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è my_chat_member:', err.message);
    }
  }
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç—Ä–æ ===
bot.on('message', async (ctx) => {
  const msg = ctx.message;
  if (!msg.text || msg.from?.is_bot || msg.reply_to_message) return;

  const words = msg.text.trim().split(/\s+/);
  if (words.length < 10) return;

  const { chat, from } = msg;
  const userId = from.id;
  const chatId = chat.id;

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å –∏–Ω—Ç—Ä–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ? ===
  const { data: existingIntro, error: selectError } = await supabase
    .from('intros')
    .select('id')
    .eq('user_id', userId)
    .eq('chat_id', chatId)
    .maybeSingle(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

  if (selectError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç—Ä–æ:', selectError);
    return;
  }

  if (existingIntro) {
    console.log(`‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ç—Ä–æ –≤ —á–∞—Ç ${chatId} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
    return;
  }

  // === –§–æ—Ä–º–∏—Ä—É–µ–º username –¥–ª—è –ª–æ–≥–æ–≤ ===
  const username = from.username 
    ? `@${from.username}` 
    : from.first_name 
      ? from.first_name 
      : `id${userId}`;

  // === –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (—Ç–∞–±–ª–∏—Ü–∞ intro_jobs) ===
  const { error: insertError } = await supabase
    .from('intro_jobs')
    .insert({
      chat_id: chatId,
      user_id: userId,
      username: from.username || from.first_name || `id${userId}`,
      text: msg.text,
      message_id: msg.message_id,
    });

  if (insertError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å:', insertError);
  } else {
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å`);
  }
});




// === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegraf ===
bot.catch((err, ctx) => {
  console.error('üö® Telegraf –ø–æ–π–º–∞–ª –æ—à–∏–±–∫—É:', err);
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ª–æ–≥-—á–∞—Ç –∏–ª–∏ Sentry
});

// === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å secret_token ===
const isProduction = !!process.env.RENDER_EXTERNAL_URL;
const baseUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${port}`;

if (!baseUrl) {
  throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞');
}

const webhookUrl = `${baseUrl}${webhookPath}`;

bot.telegram.setWebhook(webhookUrl, { secret_token: secretToken })
  .then(() => {
    console.log(`üì° Telegram –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${webhookUrl}`);
    console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è secret_token (–¥–ª–∏–Ω–∞: ${secretToken.length})`);
  })
  .catch((err) => {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram –≤–µ–±—Ö—É–∫:', err.message);
  });

// === Health-check –¥–ª—è Render ===
app.get('/', (req, res) => {
  res.status(200).send('Intro Matcher Bot ‚úÖ (—Å secret_token)');
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});



if (process.env.NODE_ENV !== 'development') {
  const { runWorker } = require('./worker');
  runWorker().catch(console.error);
}