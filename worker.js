// worker.js
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// –§—É–Ω–∫—Ü–∏—è LLM-–ø—Ä–æ–≤–µ—Ä–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤)
async function checkIfIntroWithLLM(text) {
  // –ü–û–ö–ê –ß–¢–û ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë (–¥–ª—è —Ç–µ—Å—Ç–∞)
  // –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –≤—ã–∑–æ–≤ Ollama/OpenRouter
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ LLM (–∑–∞–≥–ª—É—à–∫–∞):', text.substring(0, 50) + '...');
  return true; // <-- –ó–ê–ú–ï–ù–ò –≠–¢–û –ü–û–ó–ñ–ï
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async function processJob(job) {
  try {
    const isIntro = await checkIfIntroWithLLM(job.text);
    
    if (isIntro) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ intros (user_id UNIQUE ‚Äî –¥—É–±–ª–∏ –Ω–µ –ø—Ä–æ–π–¥—É—Ç)
      const { error } = await supabase
        .from('intros')
        .insert({
          chat_id: job.chat_id,
          user_id: job.user_id,
          username: job.username,
          raw_text: job.text,
        });

      if (error && error.code !== '23505') { // 23505 = unique_violation
        throw new Error(`Supabase insert error: ${error.message}`);
      }
    }

    // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ done
    await supabase
      .from('intro_jobs')
      .update({ status: 'done' })
      .eq('id', job.id);

    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–Ω—Ç—Ä–æ: ${isIntro ? '–î–ê' : '–ù–ï–¢'}`);
  } catch (err) {
    console.error(`üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${job.id}:`, err.message);
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
    await supabase
      .from('intro_jobs')
      .update({ status: 'failed' })
      .eq('id', job.id);
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
async function runWorker() {
  console.log('üîÑ Worker –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∑–∞–¥–∞—á–∏...');
  
  while (true) {
    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
      const { data, error } = await supabase.rpc('fetch_next_job');
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ RPC:', error);
        await new Promise(res => setTimeout(res, 5000));
        continue;
      }

      if (data && data.length > 0) {
        await processJob(data[0]);
      } else {
        // –ù–µ—Ç –∑–∞–¥–∞—á ‚Äî –∂–¥—ë–º
        await new Promise(res => setTimeout(res, 3000));
      }
    } catch (err) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:', err);
      await new Promise(res => setTimeout(res, 10000));
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runWorker();
}

module.exports = { runWorker };